function fval = testf(fnum, varargin)
% testf набор целевых функций для тестирования оптимизационных алгоритмов
% fnum — селектор функции — число или вектор вида [старший_номер, младший_номер].
% Число эквивалентно вектору [fnum, 1].
%
% Варианты использования:
% fval = testf(fnum, x)
% В этом случае fval = f(x(1), x(2), x(3), ...), где f — целевая функция, выбранная селектором fnum
% fval = testf(fnum, x, y, z, ...)
% В этом случае fval = f(x, y, z), где f — целевая функция, выбранная селектором fnum
%
% Чтобы исключить селектор, можно создать функцию-адаптер.
% Пример 1:
% f2 = @(x)(testf(2, x));
% В результате f2 будет представлять функцию № 2 из тестового набора.
% Пример 2:
% fminunc(@(x)(testf(7, x)), [10 10]);
% В результате будет найден безусловный минимум функции № 7 с помощью функции
% fminunc() при старте из точки [10 10].
%
% Доступные функции (N — количество переменных):
% 1. Безымянная, N = 2
% 1.2. № 1 с равномерно распределённой от 0 до 0.2 аддитивной помехой
% 2. Безымянная, N = 2
% 3. Функция Растригина, N >= 1
% 4. Функция Розенброка, N >= 2
% 5. Функция Miele-Cantrell, N = 2
% 6. Безымянная, N = 2
% 6.2. № 6 с равномерно распределённой от 0 до 100 аддитивной помехой
% 7. Эллиптический параболоид, N >= 1
% 8. Безымянная, N = 2
% 9. Функция из книги Рубана (2.2.18), N = 2
% 10. Фукнция из книги Рубана (1.3.8а), N = 2
% 10.2. № 10 с равномерно распределённой от 0 до 2 аддитивной помехой
% 11. Функция Химмельблау, N = 2
% 12. Восьмиконечная звезда [Пушкарёв], N = 2
%
% Версия: 0.3
% Подбор целевых функций: В. Д. Кошур, К. В. Пушкарёв
% Программирование: К. В. Пушкарёв
% 2017 г.

if (nargin < 2)
	error('Too few input arguments');
elseif (nargin == 2)
	args = num2cell(varargin{1});
else
	args = varargin;
end

if (length(fnum) > 1)
	fnum_major = fnum(1);
	fnum_minor = fnum(2);
else
	fnum_major = fnum;
	fnum_minor = 1;
end

funcs = {};
funcs{1} = {@f1, @f1_noise}; % N = 2
funcs{2} = {@f2}; % N = 2
funcs{3} = {@f3}; % Функция Растригина, N >= 1
funcs{4} = {@f4}; % Функция Розенброка, N >= 2
funcs{5} = {@f5}; % Функция Miele-Cantrell, N = 2
funcs{6} = {@f6, @f6_noise}; % N = 2
funcs{7} = {@f7}; % Эллиптический параболоид, N >= 1
funcs{8} = {@f8}; % N = 2
funcs{9} = {@f9}; % Функция Рубана (2.2.18), N = 2
funcs{10} = {@f10, @f10_noise}; % Фукнция Рубана (1.3.8а), N = 2
funcs{11} = {@f11}; % Функция Химмельблау, N = 2
funcs{12} = {@f12}; % Восьмиконечная звезда, N = 2

sf = funcs{fnum_major}{fnum_minor};
fval = sf(args{:});

function fval = f1(x, y)
fval = -1 ./ (((x.^2 + y.^2) / 200) - cos(x) .* cos(y / sqrt(2)) + 2);

function fval = f1_noise(x, y)
% Если x и/или y являются массивами (переданы сразу несколько точек), то
% случайное слагаемое будет массивом того же размера, так как случайное
% число для каждой точки должно быть своё
fval = f1(x, y) + 0.2 * rand(max(size(x), size(y)));

function fval = f2(x, y)
fval = exp(-x.^2 - y.^2) .* (x - 1).^2 .* sin(2 * pi * y);

% Функция Растригина
function fval = f3(varargin)
af = @(x)(10 + x.^2 - 10 * cos(2 * pi * x));
fval = 0;
for i = 1:length(varargin)
	fval = fval + af(varargin{i});
end

% Овражная функция Розенброка
function fval = f4(varargin)
af = @(x, y)(100 * (y - x.^2).^2 + (1 - x).^2);
fval = 0;
for i = 1:(length(varargin) - 1)
	fval = fval + af(varargin{i}, varargin{i + 1});
end

% Функция Miele-Cantrell
function fval = f5(x, y)
fval = exp(x + y .* 2).^4 + 100 * (y.^2 - x).^6 + x.^2;

function fval = f6(x, y)
fval = (x - y).^2 .* cos(x) .* cos(y / sqrt(2)) + 2;

function fval = f6_noise(x, y)
% Если x и/или y являются массивами (переданы сразу несколько точек), то
% случайное слагаемое будет массивом того же размера, так как случайное
% число для каждой точки должно быть своё
fval = f6(x, y) + 100 * rand(max(size(x), size(y)));

% Эллиптический параболоид
function fval = f7(varargin)
fval = 0;
for i = 1:length(varargin)
	fval = fval + varargin{i}.^2;
end

function fval = f8(x, y)
fval = (x.^2 - y.^2) / 18 .* cos(x .* exp(-x.^2 - y.^2)) .* cos(y / sqrt(2));

% Функция из кн. А. И. Рубана, формула (2.2.18)
function fval = f9(x, y)
af1 = @(x, a, b)(-1 ./ (a .* (x - a).^2 + b));
af2 = @(x)(af1(x, 1, 0.2) + af1(x, 2, 0.15) + af1(x, 3, 0.3));
fval = af2(x) + af2(y);

% Фукнция из кн. А. И. Рубана (с. 43), формула (1.3.8a)
function fval = f10(x, y)
af1 = @(x, a, b)(abs(x + a).^b);
af2 = @(x, y, a, b, c, d)(c * exp(d * (af1(x, a, b) + af1(y, a, b))));
fval = af2(x, y, 1, 0.6, -5, -3) + af2(x, y, 0, 1, -10, -2) + af2(x, y, -1, 0.8, -7, -2.5) + af2(x, y, -2, 0.9, -3, -1);

function fval = f10_noise(x, y)
% Если x и/или y являются массивами (переданы сразу несколько точек), то
% случайное слагаемое будет массивом того же размера, так как случайное
% число для каждой точки должно быть своё
fval = f10(x, y) + 2 * rand(max(size(x), size(y)));

% Функция Himmelblau
function fval = f11(x, y)
fval = (x.^2 + y - 11).^2 + (x + y.^2 - 7).^2;

% Восьмиконечная звезда
function fval = f12(x, y)
fval = log(x.^2 .* y.^2 .* (x - y).^2 .* (x + y).^2 + 0.1 * x.^2 + 0.1 * y.^2 + 1);
